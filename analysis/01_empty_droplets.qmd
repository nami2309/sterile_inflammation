---
title: "Empty droplets"
format:
  html:
    theme: Default
    toc: true
    code-fold: true
execute:
  echo: true
---

```{r knitr, include = TRUE, echo=FALSE}
#add to YML header if creating a standalone html to send to Shweta
    # embed-resources: true
    # self-contained: true
DOCNAME = "01_empty_droplets"
NOW <- Sys.time()

# Time chunks during knitting
knitr::knit_hooks$set(timeit = function(before) {
    if (before) {
        print(paste("Start:", Sys.time()))
        NOW <<- Sys.time()
    } else {
        print(paste("Stop:", Sys.time()))
        print(Sys.time() - NOW)
    }
})

knitr::opts_chunk$set(
    autodep        = TRUE,
    cache          = TRUE,
    cache.path     = paste0("cache/", DOCNAME, "/"),
    cache.comments = FALSE,
    echo           = TRUE,
    error          = FALSE,
    fig.align      = "center",
    fig.width      =  10,
    fig.asp        = 0.8,
    out.width      = "90%",
    message        = FALSE,
    warning        = FALSE,
    timeit         = TRUE
)
knitr::opts_chunk$set(c("png", "jpg", "tiff", "ps"),
                      dpi = 600,
                      echo = FALSE)
knitr::opts_chunk$set(fig.retina = 1)
```

```{r setup, message=FALSE, warning=FALSE, cache=FALSE, include=TRUE, echo=FALSE}
# Define sample names
sample_names <- c("PVM_0h", "PVEU_0h", "PVM_4h", "PVEU_4h", "PVM_7h", "PVEU_7h")

sample_colors <- c(
  "PVM_0h"  = "#EE9A49",  
  "PVM_4h"  = "#CD853F", 
  "PVM_7h" = "#8B5A2B",  
  "PVEU_0h"  = "#7EC0EE",
  "PVEU_4h" = "#6CA6CD", 
  "PVEU_7h" = "#4A708B"
)

script_number <- "01_"
project <- "SI"
tag <- paste0(script_number,project)

bpparam <- BiocParallel::MulticoreParam(workers = 6)
```

```{r libaries, cache = FALSE, include=TRUE, echo=FALSE}
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("DropletUtils")

library("DropletUtils")
library("SingleCellExperiment")
library("cowplot")
library("UpSetR")
library("grid")
library("tidyverse")
library(SingleCellExperiment)
library(Matrix)
library(S4Vectors)
library(readr)
library(stringr)
library(here)
library(kableExtra)
```

```{r source, cache = FALSE, echo=FALSE}
source(here::here("functions/load.R"))
source(here::here("functions/annotate.R"))
source(here::here("functions/output.R"))
```

# Introduction

In this document we are going to read in the unfiltered counts matrix produced by `Cell Ranger` and determine which of those droplets contain cells using the `DropletUtils` package.

```{r load, echo=TRUE}
sample_names <- c("PVM_0h", "PVEU_0h", "PVM_4h", 
                  "PVEU_4h", "PVM_7h", "PVEU_7h")

# Make an sce object of raw barcode counts
#file_paths <- file.path("data/cellranger_results",sample_names,"raw_feature_bc_matrix")
list_of_files <- str_c("~/Desktop/sterile_inflammation/data/cellranger_results/",sample_names,
                   "/raw_feature_bc_matrix")
raw <- read10xCounts(list_of_files, col.names=TRUE)

# Add sample-specific prefixes to the raw SCE object
sample_prefixes <- rep(sample_names, sapply(list_of_files, function(f) {
  ncol(read10xCounts(f))
}))

colnames(raw) <- paste0(sample_prefixes, "_", colnames(raw))
colnames(raw) <- gsub("_1_", "_", colnames(raw))

# Repeat for filtered SCE object
list_of_files <- str_c("~/Desktop/sterile_inflammation/data/cellranger_results/", sample_names,
                       "/filtered_feature_bc_matrix")

filtered <- read10xCounts(list_of_files, col.names = TRUE)

# Add sample-specific prefixes to the filtered SCE object
sample_prefixes <- rep(sample_names, sapply(list_of_files, function(f) {
  ncol(read10xCounts(f))
}))

colnames(filtered) <- paste0(sample_prefixes, "_", colnames(filtered))
colnames(filtered) <- gsub("_1_", "_", colnames(filtered))

# Verify the updated barcodes
head(colnames(raw))
head(colnames(filtered))

# Extract barcodes from raw and filtered SCE objects
raw_barcodes <- colnames(raw)       # Barcodes in the raw SCE
filtered_barcodes <- colnames(filtered) # Barcodes in the filtered SCE

# Update CellRangerFilt in the colData of raw
colData(raw)$CellRangerFilt <- raw_barcodes %in% filtered_barcodes

# # Verify the result
# table(colData(raw)$CellRangerFilt)
# #   FALSE    TRUE 
# # 2029157   39278 
# 
# nrow(raw)
# # [1] 32285
# ncol(raw)
# # [1] 2068435
```

The raw object now contains the raw counts and metadata, with an additional column (CellRangerFilt) marking which cells passed Cell Ranger's initial filtering. The raw dataset has `r nrow(raw)` features and `r ncol(raw)` droplets at this point.

```{r all-zero, echo=TRUE}
raw <- raw[Matrix::rowSums(counts(raw)) > 0, Matrix::colSums(counts(raw)) > 0]
```

The raw object is now pruned to exclude: - Genes that are not expressed in any cell. - Droplets that do not contain any counts (empty droplets).

After removing all zero features and droplets the dataset has `r nrow(raw)` features and `r ncol(raw)` droplets.

# Barcode ranks

Now we will compute barcode rank statistics and identify the knee and inflection points on the total count curve. All detected barcodes are ranked based on their total UMI counts. Barcodes with higher UMI counts (indicative of more RNA transcripts) are assigned higher ranks. Cell-associated barcodes typically have higher UMI counts. Background or empty droplet barcodes have low UMI counts.

```{r barcodes, echo=TRUE}
empty_thresh <- 100

bc_ranks <- barcodeRanks(counts(raw), lower = empty_thresh)

colData(raw)$BarcodeRank   <- bc_ranks$rank
colData(raw)$BarcodeTotal  <- bc_ranks$total
colData(raw)$BarcodeFitted <- bc_ranks$fitted

bc_data <- colData(raw) %>%
    as.data.frame() %>%
    select(Barcode, Kept = CellRangerFilt, Rank = BarcodeRank,
           Total = BarcodeTotal, Fitted = BarcodeFitted) %>%
    arrange(Rank)
```

Let's start by ordering the droplets according to their total counts and plotting this on a log scale. This lets us see the distribution of total counts.

The shape of the barcode rank plot provides insights into the quality of the sample. A "cliff-and-knee" shape indicates a good distinction between cell-associated and background barcodes. The steep drop (cliff) represents a clear separation, while the plateau (knee) shows the presence of low-count background barcodes. If the plot lacks this clear structure, it may suggest poor sample quality or high background noise, which can complicate downstream analyses

```{r barcodes-plot, echo=TRUE}
p <- ggplot(bc_data, aes(x = Rank, y = Total)) +
    geom_point(shape = 1, aes(colour = Kept)) +
    geom_line(aes(y = Fitted), colour = "red") +
    geom_hline(yintercept = bc_ranks@metadata$knee,
               colour = "dodgerblue", linetype = "dashed") +
    annotate("text", x = 0, y = bc_ranks@metadata$knee, label = "Knee",
             colour = "dodgerblue", hjust = 0, vjust = -1) +
    geom_hline(yintercept = bc_ranks@metadata$inflection,
               colour = "forestgreen", linetype = "dashed") +
    annotate("text", x = 0, y = bc_ranks@metadata$inflection, label = "Inflection",
             colour = "forestgreen", hjust = 0, vjust = -1) +
    geom_hline(yintercept = empty_thresh,
               colour = "darkorchid", linetype = "dashed") +
    annotate("text", x = 0, y = empty_thresh, label = "Empty threshold",
             colour = "darkorchid", hjust = 0, vjust = -1) +
    scale_x_log10(labels = scales::number) +
    scale_y_log10(labels = scales::number) +
    scale_colour_manual(values = c("black", "violet")) +
    ylab("Total counts") +
    theme_minimal()
p
ggsave(here::here("output/plots", DOCNAME, paste0(tag, "_1_barcodes_kept.png")), p,
       width = 7, height = 5, scale = 1)
```

This is typical of what we see for 10x experiment where there is a sharp drop off between droplets with lots of counts and those without many. The inflection and knee points are methods for identifying the transition between distributions. These are roughly associated with the cells selected by `Cell Ranger`. The empty threshold line indicates the point at which we assume droplets must be empty (total counts \<= `r empty_thresh`).

# Empty drops

We will now look at identifying which droplets to select using the `EmptyDrops` method. This method tests whether the composition of a droplet is significantly different from the ambient RNA in the sample which is obtained by pooling the empty droplets. Droplets with very large counts are also automatically retained.

```{r empty-drops, echo=TRUE}
set.seed(1)
emp_iters <- 60000
emp_drops <- emptyDrops(counts(raw), lower = empty_thresh, niters = emp_iters,
                        test.ambient = TRUE, BPPARAM = bpparam)
```

`EmptyDrops` uses a permutation approach to calculate p-values, assessing the likelihood that a droplet's RNA content could arise from ambient RNA alone. Ensuring a sufficient number of iterations (permutations) is vital for accurate p-value estimation. If there are any droplets that have non-significant p-values but are limited by the number of permuations, the number should be increased.

```{r empty-drops-iters, echo=TRUE}
emp_fdr <- 0.01 #Sets the FDR threshold (e.g., 1%) for determining significance.
is_cell <- emp_drops$FDR <= emp_fdr #Logical vector indicating whether each droplet's FDR is below the threshold, suggesting it contains a cell.
is_cell[is.na(is_cell)] <- FALSE #Any NA values in is_cell are set to FALSE to avoid misclassification.

colData(raw)$EmpDropsLogProb <- emp_drops$LogProb #Log probability scores from EmptyDrops.
colData(raw)$EmpDropsPValue  <- emp_drops$PValue #Raw p-values indicating the likelihood of a droplet being a cell.
colData(raw)$EmpDropsLimited <- emp_drops$Limited #Indicator if the p-value calculation was limited by the number of permutations.
colData(raw)$EmpDropsFDR <- emp_drops$FDR #Adjusted p-values accounting for multiple testing (FDR).
colData(raw)$EmpDropsFilt <- is_cell #Logical flag indicating whether the droplet is considered a cell based on FDR.

table(Limited = emp_drops$Limited, Significant = is_cell)
```

Limited: Indicates whether the p-value calculation for a droplet was limited by the number of permutations (TRUE = limited, FALSE = not limited). Significant: Indicates whether a droplet was deemed significant (i.e., likely to contain a cell) based on the FDR threshold (TRUE = significant, FALSE = not significant).

Another way to check the `EmptyDrops` results is to look at the droplets below our empty threshold. We are assuming that these droplets only contain ambient RNA and therefore the null hypothesis should be true and the distribution of p-values should be approximately uniform.

```{r empty-drops-pvals, echo=TRUE}
p <- colData(raw) %>%
    as.data.frame() %>%
    filter(BarcodeTotal <= empty_thresh,
           BarcodeTotal > 0) %>%
    ggplot(aes(x = EmpDropsPValue)) +
    geom_histogram() +
    xlab("p-value") +
    theme_minimal()
p

ggsave(here::here("output/plots", DOCNAME, paste0(tag, "_2_empty_droplets_distribution.png")), p,
       width = 7, height = 5, scale = 1)
```

Peaks near zero would tell us that not all of the droplets below the threshold are truly empty and that we should lower it.

We can also plot the negative log-probability against the total counts to see which droplets `EmptyDrops` has selected.

```{r empty-drops-plot, echo=TRUE}
p <- colData(raw) %>%
    as.data.frame() %>%
    filter(!is.na(EmpDropsFilt)) %>%
    ggplot(aes(x = BarcodeTotal, y = -EmpDropsLogProb, colour = EmpDropsFilt)) +
    geom_point() +
    scale_colour_discrete(name = "Significant") +
    xlab("Total counts") +
    ylab("-log(probability)") +
    theme_minimal()
p

ggsave(here::here("output/plots", DOCNAME, paste0(tag, "_3_empty_droplets_negative_prob.png")), p,
       width = 7, height = 5, scale = 1)
```

There were `r sum(emp_drops$Total <= empty_thresh)` droplets with less than `r empty_thresh` counts which were used to make up the ambient RNA pool. Of the remaining `r sum(emp_drops$Total > empty_thresh)` droplets `r sum(is_cell)` were found to have profiles significantly different from the ambient RNA and should contain cells.

# Comparison

Let's quickly compare differences between the selection methods using an UpSet plot:

```{r compare-overlap, echo=TRUE}
# Prepare data for UpSet plot
plot_data <- colData(raw) %>%
    as.data.frame() %>%
    select(Name             = Barcode,
           `Cell Ranger v3` = CellRangerFilt,
           EmptyDrops       = `EmpDropsFilt`,
           `Total counts`   = BarcodeTotal) %>%
    mutate(`Cell Ranger v3` = if_else(`Cell Ranger v3`, 1L, 0L),
           EmptyDrops       = if_else(EmptyDrops,       1L, 0L)) %>%
    mutate(`Total counts`   = log10(`Total counts`))

# Create UpSet plot
upset(plot_data, order.by = "freq",
      sets.x.label = "Number of cells",
      text.scale = c(2, 1.6, 2, 1.3, 2, 3))

# # Save plot as an image file
# comp_plot <- grid.grab()  # Capture current plot
# 
# # Save the captured plot
# ggsave(here::here("output", DOCNAME, paste0(tag, "_4_compare_methods.png")), comp_plot,
#        width = 10, height = 5, scale = 1)
```

We can see that most of the cells are identified by both methods. Our use of the `EmptyDrops` algorithm has identified even more cells than Cell Ranger v3 but there are very few cells that Cell Ranger identifed which `EmptyDrops` didn't.

# Selection

We are going to perform further quality control of these cells anyway so at this stage we will keep those that were selected either by Cell Ranger v3 or by `EmptyDrops`.

```{r select, echo=TRUE}
selected <- raw[, colData(raw)$CellRangerFilt | colData(raw)$EmpDropsFilt]
selected <- selected[Matrix::rowSums(counts(selected)) > 0, ]

colData(selected)$SelMethod <- "Both"
colData(selected)$SelMethod[!colData(selected)$CellRangerFilt] <- "emptyDrops"
colData(selected)$SelMethod[!colData(selected)$EmpDropsFilt] <- "CellRanger"
```

# Summary

## Parameters

This table describes parameters used and set in this document.

```{r parameters, echo=TRUE}
library(DT)
params <- list(
    list(
        Parameter = "n_droplets",
        Value = ncol(raw),
        Description = "Number of droplets in the raw dataset"
    ),
    list(
        Parameter = "empty_thresh",
        Value = empty_thresh,
        Description = "Droplets with less than this many counts are empty"
    ),
    list(
        Parameter = "emp_iters",
        Value = emp_iters,
        Description = "Number of iterations for EmptyDrops p-values"
    ),
    list(
        Parameter = "emp_fdr",
        Value = emp_fdr,
        Description = "FDR cutoff for EmptyDrops"
    ),
    list(
        Parameter = "n_cellranger",
        Value = sum(colData(raw)$CellRangerFilt),
        Description = "Number of cells selected by the Cell Ranger v3 method"
    ),
    list(
        Parameter = "n_empdrops",
        Value = sum(colData(raw)$EmpDropsFilt),
        Description = "Number of cells selected by the EmptyDrops method"
    ),
    list(
        Parameter = "n_cells",
        Value = ncol(selected),
        Description = "Number of cells selected"
    )
)

# Convert the list to a data frame
params_df <- do.call(rbind, lapply(params, as.data.frame))

# Print the datatable without page length or length menu options
datatable(
  params_df,
  options = list(),
  rownames = TRUE
)


# json_table <- jsonlite::fromJSON(params)
# 
# knitr::kable(json_table, format = "html") %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE, position = "left") %>%
#   scroll_box(width = "100%", height = "400px")
```

## Output files

This table describes the output files produced by this document. Right click and *Save Link As...* to download the results (to be implemented).

```{r save, eval=FALSE, echo=TRUE}
save(selected, file=here::here("output/processed/01_SI_selected.Robj"))
```

```{r output, echo=TRUE}
readr::write_lines(params, here::here("output/data", DOCNAME, "parameters.json"))

# Assuming all calls return single strings
file_links <- c(
    getDownloadLink("01_SI_selected.Robj", DOCNAME)
)

# Create data frame
results_df <- data.frame(
    File = file_links,
    Description = c(
        "A SingleCellExperiment object of droplets that were called as cells by either Cell ranger v3 or Empty drops"
    ),
    stringsAsFactors = FALSE  # Optional: Prevent factors if not needed
)

# Display table using knitr::kable
knitr::kable(results_df)
```

## Session information

```{r session-info, cache = FALSE, echo=TRUE}
devtools::session_info()
```
