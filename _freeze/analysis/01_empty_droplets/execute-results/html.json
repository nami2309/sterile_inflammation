{
  "hash": "b03cbaa3010a6748e1eacbcbd6af60bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Empty droplets\"\nformat:\n  html:\n    theme: Default\n    toc: true\n    code-fold: true\nexecute:\n  echo: true\n  warning: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n# Introduction\n\nIn this document we are going to read in the unfiltered counts matrix produced by `Cell Ranger` and determine which of those droplets contain cells using the `DropletUtils` package.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsample_names <- c(\"PVM_0h\", \"PVEU_0h\", \"PVM_4h\", \n                  \"PVEU_4h\", \"PVM_7h\", \"PVEU_7h\")\n\n# Make an sce object of raw barcode counts\n#file_paths <- file.path(\"data/cellranger_results\",sample_names,\"raw_feature_bc_matrix\")\nlist_of_files <- str_c(\"~/Desktop/sterile_inflammation/data/cellranger_results/\",sample_names,\n                   \"/raw_feature_bc_matrix\")\nraw <- read10xCounts(list_of_files, col.names=TRUE)\n\n# Add sample-specific prefixes to the raw SCE object\nsample_prefixes <- rep(sample_names, sapply(list_of_files, function(f) {\n  ncol(read10xCounts(f))\n}))\n\ncolnames(raw) <- paste0(sample_prefixes, \"_\", colnames(raw))\ncolnames(raw) <- gsub(\"_1_\", \"_\", colnames(raw))\n\n# Repeat for filtered SCE object\nlist_of_files <- str_c(\"~/Desktop/sterile_inflammation/data/cellranger_results/\", sample_names,\n                       \"/filtered_feature_bc_matrix\")\n\nfiltered <- read10xCounts(list_of_files, col.names = TRUE)\n\n# Add sample-specific prefixes to the filtered SCE object\nsample_prefixes <- rep(sample_names, sapply(list_of_files, function(f) {\n  ncol(read10xCounts(f))\n}))\n\ncolnames(filtered) <- paste0(sample_prefixes, \"_\", colnames(filtered))\ncolnames(filtered) <- gsub(\"_1_\", \"_\", colnames(filtered))\n\n# Verify the updated barcodes\nhead(colnames(raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PVM_0h_AAACCTGAGAAACCTA-1\" \"PVM_0h_AAACCTGAGAACAACT-1\"\n[3] \"PVM_0h_AAACCTGAGAACTCGG-1\" \"PVM_0h_AAACCTGAGAAGATTC-1\"\n[5] \"PVM_0h_AAACCTGAGAAGCCCA-1\" \"PVM_0h_AAACCTGAGAATTCCC-1\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(colnames(filtered))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PVM_0h_AAACCTGGTGCTAGCC-1\" \"PVM_0h_AAACCTGTCACATACG-1\"\n[3] \"PVM_0h_AAACCTGTCCTTGGTC-1\" \"PVM_0h_AAACGGGAGACAAGCC-1\"\n[5] \"PVM_0h_AAACGGGAGCCCGAAA-1\" \"PVM_0h_AAACGGGAGCCTATGT-1\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract barcodes from raw and filtered SCE objects\nraw_barcodes <- colnames(raw)       # Barcodes in the raw SCE\nfiltered_barcodes <- colnames(filtered) # Barcodes in the filtered SCE\n\n# Update CellRangerFilt in the colData of raw\ncolData(raw)$CellRangerFilt <- raw_barcodes %in% filtered_barcodes\n\n# # Verify the result\n# table(colData(raw)$CellRangerFilt)\n# #   FALSE    TRUE \n# # 2029157   39278 \n# \n# nrow(raw)\n# # [1] 32285\n# ncol(raw)\n# # [1] 2068435\n```\n:::\n\n\n\nThe raw object now contains the raw counts and metadata, with an additional column (CellRangerFilt) marking which cells passed Cell Ranger's initial filtering. The raw dataset has 32285 features and 2068435 droplets at this point.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nraw <- raw[Matrix::rowSums(counts(raw)) > 0, Matrix::colSums(counts(raw)) > 0]\n```\n:::\n\n\n\nThe raw object is now pruned to exclude: - Genes that are not expressed in any cell. - Droplets that do not contain any counts (empty droplets).\n\nAfter removing all zero features and droplets the dataset has 25634 features and 1445128 droplets.\n\n# Barcode ranks\n\nNow we will compute barcode rank statistics and identify the knee and inflection points on the total count curve. All detected barcodes are ranked based on their total UMI counts. Barcodes with higher UMI counts (indicative of more RNA transcripts) are assigned higher ranks. Cell-associated barcodes typically have higher UMI counts. Background or empty droplet barcodes have low UMI counts.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nempty_thresh <- 100\n\nbc_ranks <- barcodeRanks(counts(raw), lower = empty_thresh)\n\ncolData(raw)$BarcodeRank   <- bc_ranks$rank\ncolData(raw)$BarcodeTotal  <- bc_ranks$total\ncolData(raw)$BarcodeFitted <- bc_ranks$fitted\n\nbc_data <- colData(raw) %>%\n    as.data.frame() %>%\n    select(Barcode, Kept = CellRangerFilt, Rank = BarcodeRank,\n           Total = BarcodeTotal, Fitted = BarcodeFitted) %>%\n    arrange(Rank)\n```\n:::\n\n\n\nLet's start by ordering the droplets according to their total counts and plotting this on a log scale. This lets us see the distribution of total counts.\n\nThe shape of the barcode rank plot provides insights into the quality of the sample. A \"cliff-and-knee\" shape indicates a good distinction between cell-associated and background barcodes. The steep drop (cliff) represents a clear separation, while the plateau (knee) shows the presence of low-count background barcodes. If the plot lacks this clear structure, it may suggest poor sample quality or high background noise, which can complicate downstream analyses\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- ggplot(bc_data, aes(x = Rank, y = Total)) +\n    geom_point(shape = 1, aes(colour = Kept)) +\n    geom_line(aes(y = Fitted), colour = \"red\") +\n    geom_hline(yintercept = bc_ranks@metadata$knee,\n               colour = \"dodgerblue\", linetype = \"dashed\") +\n    annotate(\"text\", x = 0, y = bc_ranks@metadata$knee, label = \"Knee\",\n             colour = \"dodgerblue\", hjust = 0, vjust = -1) +\n    geom_hline(yintercept = bc_ranks@metadata$inflection,\n               colour = \"forestgreen\", linetype = \"dashed\") +\n    annotate(\"text\", x = 0, y = bc_ranks@metadata$inflection, label = \"Inflection\",\n             colour = \"forestgreen\", hjust = 0, vjust = -1) +\n    geom_hline(yintercept = empty_thresh,\n               colour = \"darkorchid\", linetype = \"dashed\") +\n    annotate(\"text\", x = 0, y = empty_thresh, label = \"Empty threshold\",\n             colour = \"darkorchid\", hjust = 0, vjust = -1) +\n    scale_x_log10(labels = scales::number) +\n    scale_y_log10(labels = scales::number) +\n    scale_colour_manual(values = c(\"black\", \"violet\")) +\n    ylab(\"Total counts\") +\n    theme_minimal()\np\n```\n\n::: {.cell-output-display}\n![](01_empty_droplets_files/figure-html/barcodes-plot-1.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\nggsave(here::here(\"output/plots\", DOCNAME, paste0(tag, \"_1_barcodes_kept.png\")), p,\n       width = 7, height = 5, scale = 1)\n```\n:::\n\n\n\nThis is typical of what we see for 10x experiment where there is a sharp drop off between droplets with lots of counts and those without many. The inflection and knee points are methods for identifying the transition between distributions. These are roughly associated with the cells selected by `Cell Ranger`. The empty threshold line indicates the point at which we assume droplets must be empty (total counts \\<= 100).\n\n# Empty drops\n\nWe will now look at identifying which droplets to select using the `EmptyDrops` method. This method tests whether the composition of a droplet is significantly different from the ambient RNA in the sample which is obtained by pooling the empty droplets. Droplets with very large counts are also automatically retained.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1)\nemp_iters <- 60000\nemp_drops <- emptyDrops(counts(raw), lower = empty_thresh, niters = emp_iters,\n                        test.ambient = TRUE, BPPARAM = bpparam)\n```\n:::\n\n\n\n`EmptyDrops` uses a permutation approach to calculate p-values, assessing the likelihood that a droplet's RNA content could arise from ambient RNA alone. Ensuring a sufficient number of iterations (permutations) is vital for accurate p-value estimation. If there are any droplets that have non-significant p-values but are limited by the number of permuations, the number should be increased.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemp_fdr <- 0.01 #Sets the FDR threshold (e.g., 1%) for determining significance.\nis_cell <- emp_drops$FDR <= emp_fdr #Logical vector indicating whether each droplet's FDR is below the threshold, suggesting it contains a cell.\nis_cell[is.na(is_cell)] <- FALSE #Any NA values in is_cell are set to FALSE to avoid misclassification.\n\ncolData(raw)$EmpDropsLogProb <- emp_drops$LogProb #Log probability scores from EmptyDrops.\ncolData(raw)$EmpDropsPValue  <- emp_drops$PValue #Raw p-values indicating the likelihood of a droplet being a cell.\ncolData(raw)$EmpDropsLimited <- emp_drops$Limited #Indicator if the p-value calculation was limited by the number of permutations.\ncolData(raw)$EmpDropsFDR <- emp_drops$FDR #Adjusted p-values accounting for multiple testing (FDR).\ncolData(raw)$EmpDropsFilt <- is_cell #Logical flag indicating whether the droplet is considered a cell based on FDR.\n\ntable(Limited = emp_drops$Limited, Significant = is_cell)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Significant\nLimited   FALSE    TRUE\n  FALSE 1399085    3355\n  TRUE      224   42464\n```\n\n\n:::\n:::\n\n\n\nLimited: Indicates whether the p-value calculation for a droplet was limited by the number of permutations (TRUE = limited, FALSE = not limited). Significant: Indicates whether a droplet was deemed significant (i.e., likely to contain a cell) based on the FDR threshold (TRUE = significant, FALSE = not significant).\n\nAnother way to check the `EmptyDrops` results is to look at the droplets below our empty threshold. We are assuming that these droplets only contain ambient RNA and therefore the null hypothesis should be true and the distribution of p-values should be approximately uniform.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- colData(raw) %>%\n    as.data.frame() %>%\n    filter(BarcodeTotal <= empty_thresh,\n           BarcodeTotal > 0) %>%\n    ggplot(aes(x = EmpDropsPValue)) +\n    geom_histogram() +\n    xlab(\"p-value\") +\n    theme_minimal()\np\n```\n\n::: {.cell-output-display}\n![](01_empty_droplets_files/figure-html/empty-drops-pvals-1.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\nggsave(here::here(\"output/plots\", DOCNAME, paste0(tag, \"_2_empty_droplets_distribution.png\")), p,\n       width = 7, height = 5, scale = 1)\n```\n:::\n\n\n\nPeaks near zero would tell us that not all of the droplets below the threshold are truly empty and that we should lower it.\n\nWe can also plot the negative log-probability against the total counts to see which droplets `EmptyDrops` has selected.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- colData(raw) %>%\n    as.data.frame() %>%\n    filter(!is.na(EmpDropsFilt)) %>%\n    ggplot(aes(x = BarcodeTotal, y = -EmpDropsLogProb, colour = EmpDropsFilt)) +\n    geom_point() +\n    scale_colour_discrete(name = \"Significant\") +\n    xlab(\"Total counts\") +\n    ylab(\"-log(probability)\") +\n    theme_minimal()\np\n```\n\n::: {.cell-output-display}\n![](01_empty_droplets_files/figure-html/empty-drops-plot-1.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\nggsave(here::here(\"output/plots\", DOCNAME, paste0(tag, \"_3_empty_droplets_negative_prob.png\")), p,\n       width = 7, height = 5, scale = 1)\n```\n:::\n\n\n\nThere were 1187710 droplets with less than 100 counts which were used to make up the ambient RNA pool. Of the remaining 257418 droplets 45819 were found to have profiles significantly different from the ambient RNA and should contain cells.\n\n# Comparison\n\nLet's quickly compare differences between the selection methods using an UpSet plot:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Prepare data for UpSet plot\nplot_data <- colData(raw) %>%\n    as.data.frame() %>%\n    select(Name             = Barcode,\n           `Cell Ranger v3` = CellRangerFilt,\n           EmptyDrops       = `EmpDropsFilt`,\n           `Total counts`   = BarcodeTotal) %>%\n    mutate(`Cell Ranger v3` = if_else(`Cell Ranger v3`, 1L, 0L),\n           EmptyDrops       = if_else(EmptyDrops,       1L, 0L)) %>%\n    mutate(`Total counts`   = log10(`Total counts`))\n\n# Create UpSet plot\nupset(plot_data, order.by = \"freq\",\n      sets.x.label = \"Number of cells\",\n      text.scale = c(2, 1.6, 2, 1.3, 2, 3))\n```\n\n::: {.cell-output-display}\n![](01_empty_droplets_files/figure-html/compare-overlap-1.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\n# # Save plot as an image file\n# comp_plot <- grid.grab()  # Capture current plot\n# \n# # Save the captured plot\n# ggsave(here::here(\"output\", DOCNAME, paste0(tag, \"_4_compare_methods.png\")), comp_plot,\n#        width = 10, height = 5, scale = 1)\n```\n:::\n\n\n\nWe can see that most of the cells are identified by both methods. Our use of the `EmptyDrops` algorithm has identified even more cells than Cell Ranger v3 but there are very few cells that Cell Ranger identifed which `EmptyDrops` didn't.\n\n# Selection\n\nWe are going to perform further quality control of these cells anyway so at this stage we will keep those that were selected either by Cell Ranger v3 or by `EmptyDrops`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselected <- raw[, colData(raw)$CellRangerFilt | colData(raw)$EmpDropsFilt]\nselected <- selected[Matrix::rowSums(counts(selected)) > 0, ]\n\ncolData(selected)$SelMethod <- \"Both\"\ncolData(selected)$SelMethod[!colData(selected)$CellRangerFilt] <- \"emptyDrops\"\ncolData(selected)$SelMethod[!colData(selected)$EmpDropsFilt] <- \"CellRanger\"\n```\n:::\n\n\n\n# Summary\n\n## Parameters\n\nThis table describes parameters used and set in this document.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(DT)\nparams <- list(\n    list(\n        Parameter = \"n_droplets\",\n        Value = ncol(raw),\n        Description = \"Number of droplets in the raw dataset\"\n    ),\n    list(\n        Parameter = \"empty_thresh\",\n        Value = empty_thresh,\n        Description = \"Droplets with less than this many counts are empty\"\n    ),\n    list(\n        Parameter = \"emp_iters\",\n        Value = emp_iters,\n        Description = \"Number of iterations for EmptyDrops p-values\"\n    ),\n    list(\n        Parameter = \"emp_fdr\",\n        Value = emp_fdr,\n        Description = \"FDR cutoff for EmptyDrops\"\n    ),\n    list(\n        Parameter = \"n_cellranger\",\n        Value = sum(colData(raw)$CellRangerFilt),\n        Description = \"Number of cells selected by the Cell Ranger v3 method\"\n    ),\n    list(\n        Parameter = \"n_empdrops\",\n        Value = sum(colData(raw)$EmpDropsFilt),\n        Description = \"Number of cells selected by the EmptyDrops method\"\n    ),\n    list(\n        Parameter = \"n_cells\",\n        Value = ncol(selected),\n        Description = \"Number of cells selected\"\n    )\n)\n\n# Convert the list to a data frame\nparams_df <- do.call(rbind, lapply(params, as.data.frame))\n\n# Print the datatable without page length or length menu options\ndatatable(\n  params_df,\n  options = list(),\n  rownames = TRUE\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-97e5851cbcf228675996\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-97e5851cbcf228675996\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],[\"n_droplets\",\"empty_thresh\",\"emp_iters\",\"emp_fdr\",\"n_cellranger\",\"n_empdrops\",\"n_cells\"],[1445128,100,60000,0.01,39278,45819,46155],[\"Number of droplets in the raw dataset\",\"Droplets with less than this many counts are empty\",\"Number of iterations for EmptyDrops p-values\",\"FDR cutoff for EmptyDrops\",\"Number of cells selected by the Cell Ranger v3 method\",\"Number of cells selected by the EmptyDrops method\",\"Number of cells selected\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Parameter<\\/th>\\n      <th>Value<\\/th>\\n      <th>Description<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":2},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Parameter\",\"targets\":1},{\"name\":\"Value\",\"targets\":2},{\"name\":\"Description\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\n# json_table <- jsonlite::fromJSON(params)\n# \n# knitr::kable(json_table, format = \"html\") %>%\n#   kable_styling(bootstrap_options = \"striped\", full_width = FALSE, position = \"left\") %>%\n#   scroll_box(width = \"100%\", height = \"400px\")\n```\n:::\n\n\n\n## Output files\n\nThis table describes the output files produced by this document. Right click and *Save Link As...* to download the results (to be implemented).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsave(selected, file=here::here(\"output/processed/01_SI_selected.Robj\"))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreadr::write_lines(params, here::here(\"output/data\", DOCNAME, \"parameters.json\"))\n\n# Assuming all calls return single strings\nfile_links <- c(\n    getDownloadLink(\"01_SI_selected.Robj\", DOCNAME)\n)\n\n# Create data frame\nresults_df <- data.frame(\n    File = file_links,\n    Description = c(\n        \"A SingleCellExperiment object of droplets that were called as cells by either Cell ranger v3 or Empty drops\"\n    ),\n    stringsAsFactors = FALSE  # Optional: Prevent factors if not needed\n)\n\n# Display table using knitr::kable\nknitr::kable(results_df)\n```\n\n::: {.cell-output-display}\n\n\n|File                |Description                                                                                                 |\n|:-------------------|:-----------------------------------------------------------------------------------------------------------|\n|[01_SI_selected.Robj](https///github.com/nami2309/sterile_inflammation//main/output/01_empty_droplets/01_SI_selected.Robj)|A SingleCellExperiment object of droplets that were called as cells by either Cell ranger v3 or Empty drops |\n\n\n:::\n:::\n\n\n\n## Session information\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndevtools::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.3 (2024-02-29)\n os       macOS Sonoma 14.6.1\n system   x86_64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Vienna\n date     2025-01-04\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package              * version   date (UTC) lib source\n P abind                  1.4-8     2024-09-12 [?] CRAN (R 4.3.3)\n   beachmat               2.18.1    2024-02-14 [1] Bioconductor 3.18 (R 4.3.2)\n   Biobase              * 2.62.0    2023-10-24 [1] Bioconductor\n   BiocGenerics         * 0.48.1    2023-11-01 [1] Bioconductor\n P BiocManager            1.30.25   2024-08-28 [?] CRAN (R 4.3.3)\n   BiocParallel           1.36.0    2023-10-24 [1] Bioconductor\n P bit                    4.5.0.1   2024-12-03 [?] RSPM\n P bit64                  4.5.2     2024-09-22 [?] CRAN (R 4.3.3)\n P bitops                 1.0-9     2024-10-03 [?] CRAN (R 4.3.3)\n   bslib                  0.8.0     2024-07-29 [1] RSPM (R 4.3.0)\n P cachem                 1.1.0     2024-05-16 [?] CRAN (R 4.3.3)\n   cli                    3.6.3     2024-06-21 [1] RSPM (R 4.3.0)\n P codetools              0.2-19    2023-02-01 [?] CRAN (R 4.3.3)\n P colorspace             2.1-1     2024-07-26 [?] CRAN (R 4.3.3)\n P cowplot              * 1.1.3     2024-01-22 [?] CRAN (R 4.3.2)\n P crayon                 1.5.3     2024-06-20 [?] CRAN (R 4.3.3)\n P crosstalk              1.2.1     2023-11-23 [?] CRAN (R 4.3.0)\n   DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n   DelayedMatrixStats     1.24.0    2023-10-24 [1] Bioconductor\n P devtools               2.4.5     2022-10-11 [?] CRAN (R 4.3.0)\n   digest                 0.6.37    2024-08-19 [1] RSPM (R 4.3.0)\n P dplyr                * 1.1.4     2023-11-17 [?] CRAN (R 4.3.0)\n P dqrng                  0.4.1     2024-05-28 [?] RSPM\n   DropletUtils         * 1.22.0    2023-10-24 [1] Bioconductor\n P DT                   * 0.33      2024-04-04 [?] CRAN (R 4.3.2)\n   edgeR                  4.0.16    2024-02-18 [1] Bioconductor 3.18 (R 4.3.2)\n P ellipsis               0.3.2     2021-04-29 [?] CRAN (R 4.3.0)\n   evaluate               1.0.1     2024-10-10 [1] RSPM (R 4.3.0)\n P farver                 2.1.2     2024-05-13 [?] CRAN (R 4.3.3)\n P fastmap                1.2.0     2024-05-15 [?] CRAN (R 4.3.3)\n P forcats              * 1.0.0     2023-01-29 [?] RSPM\n   fs                     1.6.5     2024-10-30 [1] RSPM (R 4.3.0)\n P generics               0.1.3     2022-07-05 [?] CRAN (R 4.3.0)\n   GenomeInfoDb         * 1.38.8    2024-03-15 [1] Bioconductor 3.18 (R 4.3.3)\n   GenomeInfoDbData       1.2.11    2024-12-25 [1] Bioconductor\n   GenomicRanges        * 1.54.1    2023-10-29 [1] Bioconductor\n P ggplot2              * 3.5.1     2024-04-23 [?] CRAN (R 4.3.2)\n P git2r                  0.35.0    2024-10-20 [?] RSPM\n   glue                   1.8.0     2024-09-30 [1] RSPM (R 4.3.0)\n P gridExtra              2.3       2017-09-09 [?] CRAN (R 4.3.0)\n P gtable                 0.3.6     2024-10-25 [?] CRAN (R 4.3.3)\n   HDF5Array              1.30.1    2024-03-06 [1] Bioconductor 3.18 (R 4.3.3)\n P here                 * 1.0.1     2020-12-13 [?] CRAN (R 4.3.0)\n P hms                    1.1.3     2023-03-21 [?] CRAN (R 4.3.0)\n P htmltools              0.5.8.1   2024-04-04 [?] CRAN (R 4.3.2)\n P htmlwidgets            1.6.4     2023-12-06 [?] CRAN (R 4.3.0)\n P httpuv                 1.6.15    2024-03-26 [?] CRAN (R 4.3.2)\n   IRanges              * 2.36.0    2023-10-24 [1] Bioconductor\n P jquerylib              0.1.4     2021-04-26 [?] CRAN (R 4.3.0)\n   jsonlite               1.8.9     2024-09-20 [1] RSPM (R 4.3.0)\n P kableExtra           * 1.4.0     2024-01-24 [?] RSPM\n   knitr                  1.49      2024-11-08 [1] RSPM (R 4.3.0)\n P labeling               0.4.3     2023-08-29 [?] CRAN (R 4.3.0)\n P later                  1.4.1     2024-11-27 [?] RSPM\n P lattice                0.22-5    2023-10-24 [?] CRAN (R 4.3.3)\n P lifecycle              1.0.4     2023-11-07 [?] CRAN (R 4.3.0)\n   limma                  3.58.1    2023-10-31 [1] Bioconductor\n   locfit                 1.5-9.10  2024-06-24 [1] RSPM (R 4.3.0)\n P lubridate            * 1.9.4     2024-12-08 [?] RSPM\n   magrittr               2.0.3     2022-03-30 [1] RSPM (R 4.3.0)\n P Matrix               * 1.6-5     2024-01-11 [?] CRAN (R 4.3.3)\n   MatrixGenerics       * 1.14.0    2023-10-24 [1] Bioconductor\n P matrixStats          * 1.4.1     2024-09-08 [?] CRAN (R 4.3.3)\n P memoise                2.0.1     2021-11-26 [?] CRAN (R 4.3.0)\n P mime                   0.12      2021-09-28 [?] CRAN (R 4.3.0)\n P miniUI                 0.1.1.1   2018-05-18 [?] CRAN (R 4.3.0)\n P munsell                0.5.1     2024-04-01 [?] CRAN (R 4.3.2)\n P pillar                 1.10.0    2024-12-17 [?] RSPM\n P pkgbuild               1.4.5     2024-10-28 [?] CRAN (R 4.3.3)\n P pkgconfig              2.0.3     2019-09-22 [?] CRAN (R 4.3.0)\n P pkgload                1.4.0     2024-06-28 [?] RSPM\n P plyr                   1.8.9     2023-10-02 [?] CRAN (R 4.3.0)\n P profvis                0.4.0     2024-09-20 [?] CRAN (R 4.3.3)\n P promises               1.3.2     2024-11-28 [?] RSPM\n P purrr                * 1.0.2     2023-08-10 [?] CRAN (R 4.3.0)\n   R.methodsS3            1.8.2     2022-06-13 [1] RSPM (R 4.3.0)\n   R.oo                   1.27.0    2024-11-01 [1] RSPM (R 4.3.0)\n   R.utils                2.12.3    2023-11-18 [1] RSPM (R 4.3.0)\n P R6                     2.5.1     2021-08-19 [?] CRAN (R 4.3.0)\n P ragg                   1.3.3     2024-09-11 [?] CRAN (R 4.3.3)\n P Rcpp                   1.0.13-1  2024-11-02 [?] CRAN (R 4.3.3)\n   RCurl                  1.98-1.16 2024-07-11 [1] RSPM (R 4.3.0)\n P readr                * 2.1.5     2024-01-10 [?] RSPM\n P remotes                2.5.0     2024-03-17 [?] RSPM\n   renv                   1.0.11    2024-10-12 [1] RSPM (R 4.3.0)\n   rhdf5                  2.46.1    2023-11-29 [1] Bioconductor\n   rhdf5filters           1.14.1    2023-11-06 [1] Bioconductor\n   Rhdf5lib               1.24.2    2024-02-07 [1] Bioconductor 3.18 (R 4.3.2)\n   rlang                  1.1.4     2024-06-04 [1] RSPM (R 4.3.0)\n   rmarkdown              2.29      2024-11-04 [1] RSPM (R 4.3.0)\n P rprojroot              2.0.4     2023-11-05 [?] CRAN (R 4.3.0)\n P rstudioapi             0.17.1    2024-10-22 [?] CRAN (R 4.3.3)\n   S4Arrays               1.2.1     2024-03-06 [1] Bioconductor 3.18 (R 4.3.3)\n   S4Vectors            * 0.40.2    2023-11-23 [1] Bioconductor\n P sass                   0.4.9     2024-03-15 [?] CRAN (R 4.3.2)\n P scales                 1.3.0     2023-11-28 [?] CRAN (R 4.3.0)\n   scuttle                1.12.0    2023-10-24 [1] Bioconductor\n P sessioninfo            1.2.2     2021-12-06 [?] CRAN (R 4.3.0)\n P shiny                  1.10.0    2024-12-14 [?] RSPM\n   SingleCellExperiment * 1.24.0    2023-10-24 [1] Bioconductor\n   SparseArray            1.2.4     2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n   sparseMatrixStats      1.14.0    2023-10-24 [1] Bioconductor\n   statmod                1.5.0     2023-01-06 [1] RSPM (R 4.3.0)\n P stringi                1.8.4     2024-05-06 [?] CRAN (R 4.3.2)\n   stringr              * 1.5.1     2023-11-14 [1] RSPM (R 4.3.0)\n   SummarizedExperiment * 1.32.0    2023-10-24 [1] Bioconductor\n P svglite                2.1.3     2023-12-08 [?] RSPM\n P systemfonts            1.1.0     2024-05-15 [?] RSPM\n P textshaping            0.4.1     2024-12-06 [?] RSPM\n P tibble               * 3.2.1     2023-03-20 [?] CRAN (R 4.3.0)\n P tidyr                * 1.3.1     2024-01-24 [?] CRAN (R 4.3.2)\n P tidyselect             1.2.1     2024-03-11 [?] CRAN (R 4.3.2)\n P tidyverse            * 2.0.0     2023-02-22 [?] CRAN (R 4.3.0)\n P timechange             0.3.0     2024-01-18 [?] CRAN (R 4.3.0)\n P tzdb                   0.4.0     2023-05-12 [?] CRAN (R 4.3.0)\n P UpSetR               * 1.4.0     2019-05-22 [?] CRAN (R 4.3.0)\n P urlchecker             1.0.1     2021-11-30 [?] CRAN (R 4.3.0)\n P usethis                3.1.0     2024-11-26 [?] CRAN (R 4.3.3)\n P vctrs                  0.6.5     2023-12-01 [?] CRAN (R 4.3.0)\n P viridisLite            0.4.2     2023-05-02 [?] CRAN (R 4.3.0)\n P vroom                  1.6.5     2023-12-05 [?] RSPM\n P withr                  3.0.2     2024-10-28 [?] CRAN (R 4.3.3)\n P workflowr              1.7.1     2023-08-23 [?] RSPM\n   xfun                   0.49      2024-10-31 [1] RSPM (R 4.3.0)\n P xml2                   1.3.6     2023-12-04 [?] CRAN (R 4.3.0)\n P xtable                 1.8-4     2019-04-21 [?] CRAN (R 4.3.0)\n   XVector                0.42.0    2023-10-24 [1] Bioconductor\n   yaml                   2.3.10    2024-07-26 [1] RSPM (R 4.3.0)\n   zlibbioc               1.48.2    2024-03-13 [1] Bioconductor 3.18 (R 4.3.3)\n\n [1] /Users/nami/Desktop/sterile_inflammation/renv/library/R-4.3/x86_64-apple-darwin20\n [2] /Users/nami/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/b06620f4\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "01_empty_droplets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}